{
  "openapi": "3.0.0",
  "info": {
    "title": "HTTP API for pdjr-signalk-metadata",
    "version": "1.0.0",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "[pdjr-skplugin-metadata](https://github.com/pdjr-signalk/pdjr-skplugin-metadata)\nis a plugin for the\n[Signal K node server](https://github.com/SignalK/signalk-server).\n\nA Signal K server hosting the plugin will present this API under\nthe root https://*server_ip*:*server_port*/plugins/metadata.\n\nMetadata resources returned by the following requests are filtered\nto exclude keys de-selected by the 'excludePaths' configuration\nproperty.\n"
  },
  "externalDocs": {
    "description": "Plugin README document",
    "url": "https://github.com/pdjr-signalk/pdjr-skplugin-metadata#readme"
  },
  "paths": {
    "/metadata": {
      "get": {
        "description": "Get metadata resources available in the plugin's configured\n```resourceType```.\n",
        "responses": {
          "200": {
            "description": "OK.\nThe response body is an object consisting of metadata\nobjects indexed by path.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "description": "Signal K metadata object",
                    "$ref": "#/components/schemas/metadata"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.\nThe server was unable to service the request.\n"
          }
        }
      },
      "put": {
        "description": "Save a collection of metadata resources to the plugin's\nconfigured ```resource type```.\nAfter the specified recources have been committed, the metadata\nrepository is rebuilt and terminal keys injected into the\nSignal K tree.\n",
        "requestBody": {
          "description": "Object consisting of a collection of metadata objects indexed\nby key/path.\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "description": "Signal K metadata object.",
                  "$ref": "#/components/schemas/metadata"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.\nAll supplied metadata objects have been saved to the\nconfigured resource collection.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/update-response"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\nSome, perhaps all, supplied metadata objects could not be\nsaved to the configured resource collection.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/update-response"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.\nThe request was rejected because the resource repository was busy.\n"
          },
          "500": {
            "description": "Internal Server Error.\nThe server was unable to service the request.\n"
          }
        }
      }
    },
    "/metadata/{key}": {
      "get": {
        "description": "Get the value of a specified metadata resource in the plugin's\nconfigured ```resource type```.\n",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Identifier of the resource whose value is required in Signal\nK dotted path format.\n",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nThe response body is the metadata object referenced by {key}.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/metadata"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.\nThe requested {key} does not exist.\n"
          },
          "500": {
            "description": "Internal Server Error.\nThe server was unable to service the request.\n"
          }
        }
      },
      "put": {
        "description": "Update or create a metadata resource for the specified {key}.\nThe supplied metadata will be saved to the resource provider\nand injected into the Signal K tree.\n",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Identifier of the resource to be created/updated.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New or replacement metadata object.\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/metadata"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK.\nThe specified resource has been updated or created.\n"
          },
          "404": {
            "description": "Not Found.\nThe request was invalid (bad or missing reource key/value).\n"
          },
          "503": {
            "description": "Service Unavailable.\nThe request was rejected because the resource repository was busy.\n"
          },
          "500": {
            "description": "Internal Server Error.\nThe server was unable to service the request.\n"
          }
        }
      },
      "delete": {
        "description": "Delete the resource for a specified key.\n",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Identifier of the resource to be deleted.\n",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/key"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK.\nThe specified resource has been deleted.\n"
          },
          "404": {
            "description": "Not Found.\nThe request was invalid (bad or missing key).\n"
          },
          "503": {
            "description": "Service Unavailable.\nThe request was rejected because the resource repository was busy.\n"
          },
          "500": {
            "description": "Internal Server Error.\nThe server was unable to service the request.\n"
          }
        }
      }
    },
    "/inject": {
      "patch": {
        "description": "Install all metadata resources into the Signal K tree.\n",
        "responses": {
          "200": {
            "description": "OK.\nAll metadata values were successfully merged into the\nSignal K tree.\n"
          },
          "503": {
            "description": "Service Unavailable.\nThe request was rejected because the resource repository was busy.\n"
          },
          "500": {
            "description": "Internal Server Error.\nSome, but not all, metadata files were merged into the\nSignal K tree.\n"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "key": {
        "description": "Signal K key/path expressesed using dotted notation or the name of a metadata resource which is usually, but not necessarily, the same thing.",
        "example": "tanks.wasteWater.0.currentLevel",
        "type": "string"
      },
      "key-list": {
        "description": "Array containing a sorted list of Signal K or metadata keys.",
        "example": [
          "tanks.wasteWater.0.currentLevel"
        ],
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/key"
        }
      },
      "metadata": {
        "type": "object",
        "description": "Single metadata value (see Signal K specification)."
      },
      "update-response": {
        "description": "Status response.",
        "type": "object",
        "properties": {
          "succeeded": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "failed": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}
