{
  "openapi": "3.0.0",
  "info": {
    "version": "1.1.0",
    "title": "API for metadata plugin (pdjr-skplugin-metadata)",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "paths": {
    "/keys": {
      "get": {
        "tags": [],
        "description": "Get a list of all resource keys in the active metadata resource type. The result is filtered to eliminate excluded paths.",
        "responses": {
          "200": {
            "description": "Success. The returned object contains an array of metadata keys.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/metadata-list"
                }
              }
            }
          },
          "500": {
            "description": "The server was unable to service the request."
          }
        }
      }
    },
    "/keys/{key}": {
      "get": {
        "tags": [],
        "description": "Get the metadata resource for a apecified key.",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Name (key) of the resource whose metadata content is required.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metadata-key"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The metadata value for the requested key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/metadata-value"
                }
              }
            }
          },
          "404": {
            "description": "The requested key does not exist."
          },
          "500": {
            "description": "The server was unable to service the request."
          }
        }
      },
      "put": {
        "tags": [],
        "description": "Update or create the metadata object specified by {key}.",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Key (pathname) of an existing or new metadata resource.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metadata-key"
            }
          }
        ],
        "requestBody": {
          "description": "New or replacement metadata value.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/metadata-value"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The specified metadata resource has been updated or created."
          },
          "404": {
            "description": "The request was invalid (bad or missing key or metadata value)."
          },
          "405": {
            "description": "The request was rejected because the resource repository was busy: try again later."
          },
          "500": {
            "description": "The server was unable to service the request."
          }
        }
      },
      "delete": {
        "tags": [],
        "description": "Delete the metadata rource specified by {key}.",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Key (pathname) of the resource to delete.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metadata-key"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The specified metadata resource has been deleted."
          },
          "404": {
            "description": "The request was invalid (bad or missing {key})."
          },
          "405": {
            "description": "The request was rejected because the resource repository was busy: try again later."
          },
          "500": {
            "description": "The server was unable to service the request."
          }
        }
      }
    },
    "/paths": {
      "get": {
        "tags": [],
        "description": "Get a list of active Signal K keys which have associated metadata.",
        "responses": {
          "200": {
            "description": "Object containing an array of Signal K keys.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/metadata-list"
                }
              }
            }
          },
          "500": {
            "description": "The server was unable to service the request."
          }
        }
      }
    },
    "/paths/{key}": {
      "get": {
        "tags": [],
        "description": "Return the Signal K metadata object for a specified {key}.",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Pathname of the Signal K entity whose metadata is required.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/metadata-key"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Signal K metadata value for the requested key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/metadata-value"
                }
              }
            }
          },
          "404": {
            "description": "The requested key does not exist."
          },
          "500": {
            "description": "The server was unable to service the request."
          }
        }
      }
    },
    "/compose": {
      "patch": {
        "tags": [],
        "description": "Trigger composition of metadata values from metadata configuration files.",
        "responses": {
          "200": {
            "description": "The operation completed successfully. All Signal K paths were processed and metadata values merged into the resource collection."
          },
          "500": {
            "description": "The operation did not complete successfully. Some Signal K paths may have been processed and metadata values merged into the resource collection."
          },
          "405": {
            "description": "The operation request was rejected because the resource repository was temporarily busy or otherwise unavailable. Try again later."
          }
        }
      }
    },
    "/snapshot": {
      "patch": {
        "tags": [],
        "description": "Copy/merge all live Signal K metadata objects into the plugin repository.",
        "responses": {
          "200": {
            "description": "The operation completed successfully. All Signal K paths were processed and metadata values merged into the resource collection."
          },
          "500": {
            "description": "The operation did not complete successfully. Some Signal K paths may have been processed and metadata values merged into the resource collection."
          },
          "405": {
            "description": "The operation request was rejected because the resource repository was temporarily busy or otherwise unavailable. Try again later."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "metadata-key": {
        "type": "string",
        "description": "Signal K value key expressesed as a Signal K path.",
        "example": "tanks.wasteWater.0.currentLevel"
      },
      "metadata-list": {
        "description": "List of metadata objects.",
        "type": "object",
        "properties": {
          "req": {
            "$ref": "#/components/schemas/req"
          },
          "keys": {
            "type": "array",
            "description": "List of keys with associated metadata.",
            "items": {
              "$ref": "#/components/schemas/metadata-key"
            }
          }
        }
      },
      "metadata-value": {
        "type": "object",
        "description": "Single metadata value",
        "properties": {
          "req": {
            "$ref": "#/components/schemas/req"
          },
          "key": {
            "$ref": "#/components/schemas/metadata-key"
          },
          "value": {
            "type": "object",
            "description": "Complete metadata object (see Signal K specification)"
          }
        }
      },
      "req": {
        "type": "string",
        "description": "URL that requested a response from the server.",
        "example": "/plugin/metadata/keys/"
      }
    }
  } 
}
